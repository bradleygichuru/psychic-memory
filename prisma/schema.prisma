generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Student {
    StudentNo   Int        @id @unique
    FirstName   String
    SirName     String
    Email       String     @unique
    Faculty     String
    Course      String
    YearOfStudy Int
    password    String     @unique
    voter       Voter?
    candidate   Candidate?
}

model Candidate {
    CandidateId  String   @id @unique @default(cuid())
    StudentNo    Int      @unique
    PositionName String
    Manifesto    String   @db.LongText @default("Here’s to the crazy ones. The misfits. The rebels. The troublemakers. The round pegs in the square holes. The ones who see things differently. They’re not fond of rules. And they have no respect for the status quo. You can praise them, disagree with them, quote them, disbelieve them, glorify them or vilify them. About the only thing you can’t do is ignore them. Because they change things.")
    student      Student  @relation(fields: [StudentNo], references: [StudentNo])
    position     Position @relation(fields: [PositionName], references: [PositionName], onDelete: Cascade, onUpdate: Cascade)
    vote         Vote?
}

model Position {
    PositionId          String      @id @unique @default(cuid())
    PositionName        String      @unique
    PositionDescription String
    candidates          Candidate[]
    votes               Vote[]
}

model Vote {
    VoteId        String    @id @unique @default(cuid())
    PositionId    String
    VoterId       String
    CandidateId   String    @unique
    CastTimeStamp DateTime  @default(now())
    position      Position  @relation(fields: [PositionId], references: [PositionId])
    voter         Voter     @relation(fields: [VoterId], references: [VoterId])
    candidate     Candidate @relation(fields: [CandidateId], references: [CandidateId], onDelete: NoAction, onUpdate: NoAction)
}

model Election {
    ElectionId          String   @id @unique @default(cuid())
    ElectionName        String
    ElectionDescription String
    ElectionDate        DateTime
    InProgress          Boolean
    StartedAt           DateTime
}

model Voter {
    VoterId        String  @id @unique @default(cuid())
    StudentNo      Int     @unique
    student        Student @relation(fields: [StudentNo], references: [StudentNo])
    VotingStatus   Boolean
    LoginTimeStamp String
    votes          Vote[] //TODO ensure a voter does not cast two votes for one position 
}

model Admin {
    AdminId   String @id @unique @default(cuid())
    AdminName String
    password  String
}
